{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nvar _jsxFileName = \"F:\\\\Repos\\\\react-native-todo-app\\\\App.js\";\nimport React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport AsyncStorage from \"react-native-web/dist/exports/AsyncStorage\";\nimport Config from \"./src/Config\";\nimport Header from \"./src/components/Header\";\nimport Footer from \"./src/components/Footer\";\n\nvar App = function (_React$Component) {\n  _inherits(App, _React$Component);\n\n  function App(props) {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(App).call(this, props));\n    _this.state = {\n      notes: [],\n      note: ''\n    };\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var notes;\n      return _regeneratorRuntime.async(function componentDidMount$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(AsyncStorage.getItem('notes'));\n\n            case 2:\n              notes = _context.sent;\n\n              if (notes && notes.length > 0) {\n                this.setState({\n                  notes: JSON.parse(notes)\n                });\n              }\n\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, this);\n    }\n  }, {\n    key: \"updateAsyncStorage\",\n    value: function updateAsyncStorage(notes) {\n      return new Promise(function _callee(resolve, reject) {\n        return _regeneratorRuntime.async(function _callee$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.prev = 0;\n                _context2.next = 3;\n                return _regeneratorRuntime.awrap(AsyncStorage.removeItem('notes'));\n\n              case 3:\n                _context2.next = 5;\n                return _regeneratorRuntime.awrap(AsyncStorage.setItem('notes', JSON.stringify(notes)));\n\n              case 5:\n                return _context2.abrupt(\"return\", resolve(true));\n\n              case 8:\n                _context2.prev = 8;\n                _context2.t0 = _context2[\"catch\"](0);\n                return _context2.abrupt(\"return\", reject(_context2.t0));\n\n              case 11:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, null, null, [[0, 8]]);\n      });\n    }\n  }, {\n    key: \"cloneNotes\",\n    value: function cloneNotes() {\n      return _toConsumableArray(this.state.notes);\n    }\n  }, {\n    key: \"addNote\",\n    value: function addNote() {\n      var notes;\n      return _regeneratorRuntime.async(function addNote$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              if (!(this.state.note.length <= 0)) {\n                _context3.next = 2;\n                break;\n              }\n\n              return _context3.abrupt(\"return\");\n\n            case 2:\n              _context3.prev = 2;\n              notes = this.cloneNotes();\n              notes.push(this.state.note);\n              _context3.next = 7;\n              return _regeneratorRuntime.awrap(this.updateAsyncStorage(notes));\n\n            case 7:\n              this.setState({\n                notes: notes,\n                note: ''\n              });\n              _context3.next = 13;\n              break;\n\n            case 10:\n              _context3.prev = 10;\n              _context3.t0 = _context3[\"catch\"](2);\n              alert(_context3.t0);\n\n            case 13:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, null, this, [[2, 10]]);\n    }\n  }, {\n    key: \"removeNote\",\n    value: function removeNote(i) {\n      var notes;\n      return _regeneratorRuntime.async(function removeNote$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              _context4.prev = 0;\n              notes = this.cloneNotes();\n              notes.splice(i, 1);\n              _context4.next = 5;\n              return _regeneratorRuntime.awrap(this.updateAsyncStorage(notes));\n\n            case 5:\n              this.setState({\n                notes: notes\n              });\n              _context4.next = 11;\n              break;\n\n            case 8:\n              _context4.prev = 8;\n              _context4.t0 = _context4[\"catch\"](0);\n              alert(_context4.t0);\n\n            case 11:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, null, this, [[0, 8]]);\n    }\n  }, {\n    key: \"renderNotes\",\n    value: function renderNotes() {\n      var _this2 = this;\n\n      return this.state.notes.map(function (note, i) {\n        return React.createElement(TouchableOpacity, {\n          key: i,\n          style: styles.note,\n          onPress: function onPress() {\n            return _this2.removeNote(i);\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 164\n          }\n        }, React.createElement(Text, {\n          style: styles.noteText,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 168\n          }\n        }, note));\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      return React.createElement(View, {\n        style: styles.container,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 178\n        }\n      }, React.createElement(Header, {\n        title: Config.title,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 180\n        }\n      }), React.createElement(ScrollView, {\n        style: styles.scrollView,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 182\n        }\n      }, this.renderNotes()), React.createElement(Footer, {\n        onChangeText: function onChangeText(note) {\n          return _this3.setState({\n            note: note\n          });\n        },\n        inputValue: this.state.note,\n        onNoteAdd: function onNoteAdd() {\n          return _this3.addNote();\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 186\n        }\n      }));\n    }\n  }]);\n\n  return App;\n}(React.Component);\n\nexport { App as default };\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    position: 'relative'\n  },\n  scrollView: {\n    maxHeight: '82%',\n    marginBottom: 100,\n    backgroundColor: '#fff'\n  },\n  note: {\n    margin: 20,\n    padding: 20,\n    alignItems: 'center',\n    justifyContent: 'center',\n    borderWidth: 2,\n    backgroundColor: '#f9f9f9',\n    borderColor: '#ddd',\n    borderRadius: 10\n  },\n  noteText: {\n    fontSize: 14,\n    padding: 20\n  }\n});","map":{"version":3,"sources":["F:/Repos/react-native-todo-app/App.js"],"names":["React","Config","Header","Footer","App","props","state","notes","note","AsyncStorage","getItem","length","setState","JSON","parse","Promise","resolve","reject","removeItem","setItem","stringify","cloneNotes","push","updateAsyncStorage","alert","i","splice","map","styles","removeNote","noteText","container","title","scrollView","renderNotes","addNote","Component","StyleSheet","create","flex","position","maxHeight","marginBottom","backgroundColor","margin","padding","alignItems","justifyContent","borderWidth","borderColor","borderRadius","fontSize"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { \r\n    StyleSheet, \r\n    Text, \r\n    View,\r\n    ScrollView,\r\n    TouchableOpacity,\r\n    AsyncStorage\r\n} from 'react-native';\r\n\r\nimport Config from './src/Config';\r\nimport Header from './src/components/Header';\r\nimport Footer from './src/components/Footer';\r\n\r\n/**\r\n * App\r\n *\r\n * Root component for the application.\r\n * Handles logic for adding and removing notes.\r\n */\r\nexport default class App extends React.Component {\r\n\r\n    /**\r\n     * constructor\r\n     *\r\n     * @array   notes   all added notes.\r\n     * @string  note    the current note value.\r\n     */\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            notes: [],\r\n            note: ''\r\n        }\r\n\r\n    }\r\n\r\n    /**\r\n     * componentDidMount\r\n     *\r\n     * Load notes from asyncstorage if exists\r\n     */\r\n    async componentDidMount() {\r\n\r\n        const notes = await AsyncStorage.getItem('notes');\r\n        if (notes && notes.length > 0) {\r\n            this.setState({\r\n                notes: JSON.parse(notes)\r\n            })\r\n        }\r\n\r\n    }\r\n\r\n    /**\r\n     * updateAsyncStorage\r\n     *\r\n     * @array   notes   notes array to save in asyncstorage\r\n     *\r\n     * @return  promise\r\n     */\r\n    updateAsyncStorage(notes) {\r\n\r\n        return new Promise( async(resolve, reject) => {\r\n\r\n            try {\r\n\r\n                await AsyncStorage.removeItem('notes');\r\n                await AsyncStorage.setItem('notes', JSON.stringify(notes));\r\n                return resolve(true);\r\n\r\n            } catch(e) {\r\n                return reject(e);\r\n            }\r\n\r\n        });\r\n\r\n    }\r\n\r\n    /**\r\n     * cloneNotes\r\n     *\r\n     * Creates a shallow copy of the state notes array\r\n     *\r\n     * @return   @array  cloned notes array\r\n     */\r\n    cloneNotes() {\r\n        return [...this.state.notes];\r\n    }\r\n\r\n    /**\r\n     * addNote\r\n     *\r\n     * Adds new note.\r\n     *\r\n     * @return  undefined\r\n     */\r\n    async addNote() {\r\n\r\n        if (this.state.note.length <= 0)\r\n            return;\r\n\r\n        try {\r\n\r\n            const notes = this.cloneNotes();\r\n            notes.push(this.state.note);\r\n\r\n            await this.updateAsyncStorage(notes);\r\n\r\n            this.setState({\r\n                notes: notes,\r\n                note: ''\r\n            });\r\n\r\n        }\r\n\r\n        catch(e) {\r\n\r\n            // notes could not be updated\r\n            alert(e);\r\n\r\n        }\r\n\r\n    }\r\n\r\n    /**\r\n     * removeNote\r\n     *\r\n     * Removes note based on array index.\r\n     *\r\n     * @return  undefined\r\n     */\r\n    async removeNote(i) {\r\n\r\n        try {\r\n\r\n            const notes = this.cloneNotes();\r\n            notes.splice(i, 1);\r\n\r\n            await this.updateAsyncStorage(notes);\r\n            this.setState({ notes: notes });\r\n\r\n        }\r\n\r\n        catch(e) {\r\n\r\n            // Note could not be deleted\r\n            alert(e);\r\n\r\n        }\r\n\r\n    }\r\n\r\n    /**\r\n     * renderNotes\r\n     *\r\n     * Renders all notes in note array in a map.\r\n     *\r\n     * @return  Mapped notes array\r\n     */\r\n    renderNotes() {\r\n\r\n        return this.state.notes.map((note, i) => {\r\n            return (\r\n                <TouchableOpacity \r\n                    key={i} style={styles.note} \r\n                    onPress={ () => this.removeNote(i) }\r\n                >\r\n                    <Text style={styles.noteText}>{note}</Text>\r\n                </TouchableOpacity>\r\n            );\r\n        });\r\n\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <View style={styles.container}>\r\n\r\n                <Header title={Config.title} />\r\n\r\n                <ScrollView style={styles.scrollView}>\r\n                    {this.renderNotes()}\r\n                </ScrollView>\r\n\r\n                <Footer\r\n                    onChangeText={ (note) => this.setState({note})  }\r\n                    inputValue={this.state.note}\r\n                    onNoteAdd={ () => this.addNote() }\r\n                />\r\n\r\n            </View>\r\n        );\r\n\r\n    }\r\n\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n    container: {\r\n        flex: 1,\r\n        position: 'relative'\r\n    },\r\n    scrollView: {\r\n        maxHeight: '82%',\r\n        marginBottom: 100,\r\n        backgroundColor: '#fff'\r\n    },\r\n    note: {\r\n        margin: 20,\r\n        padding: 20,\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n        borderWidth: 2,\r\n        backgroundColor: '#f9f9f9',\r\n        borderColor: '#ddd',\r\n        borderRadius: 10,\r\n    },\r\n    noteText: {\r\n        fontSize: 14,\r\n        padding: 20,\r\n    }\r\n});"]},"metadata":{},"sourceType":"module"}